import argparseimport osimport loggingfrom pathlib import Pathfrom src.digital_twin.dt_manager import GeneralPurposeManagerdef get_args():    parser = argparse.ArgumentParser(description="Digital Twin of a Battery Energy Storage System (RSE)",                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)    parser.add_argument("--data-folder",                        action="store",                        default="./data",                        type=str,                        help="Specifies the folder which we retrieve data from."                        )    parser.add_argument("--configs",                        action="store",                        default="experiment_config.yaml",                        type=str,                        help="Specifies the file containing parameters useful for the experiment."                        )    models_choices = ['thevenin', 'rc_thermal', 'r2c_thermal', 'bolun']    parser.add_argument("--models",                        nargs='*',                        choices=models_choices,                        default=['thevenin', 'rc_thermal'],                        help="Specifies which electrical should be run during the experiment."                        )    mode_choices = ['simulation', 'what-if', 'learning', 'optimization']    parser.add_argument("--mode",                        choices=mode_choices,                        default='simulation',                        help="Specifies the working mode of the Digital Twin."                        )    parser.add_argument("--iterations",                        default=None,                        type=int,                        help="Specifies the number of iterations of the entire experiment."                        )    parser.add_argument("--timestep",                        default=1.,                        type=float,                        help="Specifies the timestep of the simulator in seconds."                        )    parser.add_argument("--save-results",                        action="store_true",                        default=False,                        help="Specifies if it is necessary to save computed data at the end of the experiment."                        )    parser.add_argument("--plot",                        action="store_true",                        default=False,                        help="Specifies if it is necessary to immediately plot computed data at the end of the "                             "experiment."                        )    parser.add_argument("--verbose",                        action="store_true",                        default=False,                        help="Increases logged information, but slows down the computation."                        )    input_args = vars(parser.parse_args())    return input_argsif __name__ == '__main__':    args = get_args()    data_folder = args['data_folder']    simulation_config = args['configs']    models = args['models']    mode = args['mode']    iterations = args['iterations']    timestep = args['timestep']    save_flag = args['save_results']    plot_flag = args['plot']    verbose = args['verbose']    # Data folder required to run the experiment    data_folders_dict = dict(        config_data="configuration",        ground_data="ground",        output_data="output"    )    data_folder_paths = {}    for key in data_folders_dict.keys():        if not os.path.exists(data_folder + '/' + data_folders_dict[key]):            raise NotADirectoryError("Folder '{}' is not a present inside 'data' folder. "                                     "Folder 'data' has to contain the following sub-folders to run the simulation:\n"                                     "\t- 'configuration': contains the configuration file which can be selected with"                                     " --config argument;\n"                                     "\t- 'ground': contains real world data, both load and output data;\n"                                     "\t- 'output': will contains experiment outputs.\n"                                     .format(data_folders_dict[key]))        else:            data_folder_paths[key] = Path(data_folder + '/' + data_folders_dict[key])    # Setup logger    logging.basicConfig(format='%(asctime)s | %(name)s-%(levelname)s: %(message)s')    logger = logging.getLogger(name="DT_logger")    if verbose:        logger.setLevel(logging.INFO)    # Time options    time_options = {        "iterations": iterations,        "timestep": timestep    }    dt_manager = GeneralPurposeManager.get_instance(mode)    handler = dt_manager(experiment_config=simulation_config,                         models=models,                         time_options=time_options,                         save_results=save_flag,                         plot_results=plot_flag,                         **data_folder_paths)    handler.run()