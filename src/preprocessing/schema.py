from schema import Schema, SchemaError, Regex, And, Or, Optional, Useimport yamlimport logginglogger = logging.getLogger('DT_logger')schemas = {}string_pattern = Regex(r'^[a-zA-Z0-9_. ]+$',                       error="Error in string '{}': it can only have a-z, A-Z, 0-9, and _.")path_pattern = Regex(r'^[a-zA-Z0-9_./]+$',                     error="Error in path '{}': it can only have a-z, A-Z, 0-9, ., / and _.")class_pattern = Regex(r'^[a-zA-Z0-9]+$',                      error="Error in class name '{}': it can only have a-z, A-Z and 0-9.")var_pattern = Regex(r'^[a-z_]+$',                    error="Error in variable '{}': it can only have a-z and _.")label_pattern = Regex(r'^[a-zA-Z_\[\] ]+$',                      error="Error in label '{}': it can only have a-z, A-Z, [,], and _.")unit_pattern = Regex(r'^[a-zA-Z]+$',                     error="Error in unit identifier '{}': it can only have a-z, A-Z.")ground_data = Schema(    {        # Ground data structure        "file": And(str, string_pattern),        "load": And(str, var_pattern),        "vars": [            Or(                {                    "var": And(str, var_pattern, Use(str.lower)),                    "label": And(str, label_pattern),                    "unit": And(str, unit_pattern)                }            )        ]    })battery_param = Schema(    {        "var": And(str, var_pattern, Use(str.lower)),        "value": Or(float, int),        "unit": And(str, unit_pattern)    })battery = Schema(    {        "sign_convention": Or('active', 'passive'),        "params": {            "nominal_capacity": battery_param,            "v_max": battery_param,            "v_min": battery_param,            "temp_ambient": battery_param,        },        "init":            {                Optional('voltage'): Or(float, And(int, Use(float))),                Optional('current'): Or(float, And(int, Use(float))),                'temperature': Or(float, And(int, Use(float))),                "soc": And(Or(float, And(int, Use(float))), lambda n: 0 <= n <= 1),                "soh": And(Or(float, And(int, Use(float))), lambda n: 0 <= n <= 1),            }    })sim_config_schema = Schema(    {        # Summary        Optional("experiment_name"): And(str, string_pattern),        Optional("description"): And(str),        Optional("goal"): And(str),        "destination_folder": And(str, string_pattern),        "ground_data": ground_data,        # Battery parameters        "battery": battery,    })whatif_config_schema = Schema(    {        # Summary        Optional("experiment_name"): And(str, string_pattern),        Optional("description"): And(str),        Optional("goal"): And(str),        "destination_folder": And(str, string_pattern),        # Schedule defined by the user        "schedule": [Or(str, string_pattern)],        # Battery parameters        "battery": battery,    })asset = Schema(    {        "category": And(str, var_pattern),        "file": Or(None, And(str, path_pattern))    })assets_schema = Schema(    {        "models_path": And(str, path_pattern),        "models": {            Optional("thevenin"): asset,            Optional("rc_thermal"): asset,            Optional("r2c_thermal"): asset,            Optional("bolun"): asset,            Optional("data_driven"): asset,        }    })single_component = Schema(    {        "type": Or('scalar', 'lookup'),        Optional("scalar"): Or(float, And(int, Use(float))),        Optional("lookup"): {            "inputs": {                Optional('temp'): [Or(float, int)],                Optional('soc'): [And(Or(float, And(int, Use(float))), lambda n: 0 <= n <= 1)],                Optional('soh'): [And(Or(float, And(int, Use(float))), lambda n: 0 <= n <= 1)],            },            "output": [Or(float, And(int, Use(float)))]        }    },)thevenin = Schema(    {   # Thevenin        "r0": single_component,        "r1": single_component,        "c": single_component,        "v_ocv": single_component    })rc_thermal = Schema(    {  # RC_thermal        "r_term": single_component,        "c_term": single_component,    })r2c_thermal = Schema(    {        "lambda": single_component,        "length": single_component,        "area_int": single_component,        "area_surf": single_component,        "h": single_component,        "mass": single_component,        "cp": single_component,    })bolun = Schema(    {  # Bolun        "SEI": {            "alpha_sei": Or(float, And(int, Use(float))),            "beta_sei": Or(float, And(int, Use(float))),        },        "stress_factors": {            "calendar": [And(str, var_pattern)],            "cyclic": [And(str, var_pattern)],        },        "cycle_counting_mode": Or('rainflow', 'streamflow', 'fastflow', only_one=True)    },)stress_model_schema = Schema(    {        "time": {            "k_t": Or(float, And(int, Use(float))),        },        "soc": {            "k_soc":Or(float, And(int, Use(float))),            "soc_ref": Or(float, And(int, Use(float)))        },        "temperature": {            "k_temp": Or(float, And(int, Use(float))),            "temp_ref": Or(float, And(int, Use(float)))        },        "dod_bolun": {            "k_delta1": Or(float, And(int, Use(float))),            "k_delta2": Or(float, And(int, Use(float))),            "k_delta3": Or(float, And(int, Use(float)))        },        Optional("dod_quadratic"): Or(float, And(int, Use(float))),        Optional("dod_exponential"): Or(float, And(int, Use(float))),    })model_schema = Schema(    {        "type": And(str, var_pattern),        "class_name": And(str, class_pattern),        "components": Or(thevenin, rc_thermal, r2c_thermal, bolun),        Optional("stress_models"): stress_model_schema    })schemas['sim_config'] = sim_config_schemaschemas['whatif_config'] = whatif_config_schemaschemas['assets'] = assets_schemaschemas['model'] = model_schemadef _check_schema(yaml_dict: dict, schema_type: str):    """            Args:        yaml_dict (dict): _description_        schema_type (str): _description_    """    try:        schemas[schema_type].validate(yaml_dict)    except SchemaError as se:        raise sedef read_yaml(yaml_file: str, yaml_type: str):    """    Args:        yaml_file (str):        yaml_type (str):    Returns:    """    _file_types = ['sim_config', 'whatif_config', 'assets', 'model']    if yaml_type not in _file_types:        logger.error("The schema type of file {} is not existing!".format(yaml_file))        exit(1)    with open(yaml_file, 'r') as fin:        params = yaml.safe_load(fin)    try:        _check_schema(params, yaml_type)    except SchemaError as se:        logger.error("Error within the yaml file '{}': {}".format(yaml_file, se.args[0]))        exit(1)    return params